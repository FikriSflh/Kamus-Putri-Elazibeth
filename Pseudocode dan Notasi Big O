Class HashTable

    Attributes:

        size : Integer 						O(1)

        table : Array of ArrayLists of Strings			O(1)

	
    Constructor HashTable(size): 				O(1)	

        size ← input size						O(1)

        table ← array of size empty ArrayLists			O(1)

        FOR I  ← 0 to size 					O(n)

		Table ← new array list				O(1)

        END FOR


    Method hashFunction(kata):				O(n)

        hash ← 0							O(1)

        FOR i ← 0 to length of kata – 1				O(n)

            ch ← kata[i]						O(1)

            asciiValue ← ASCII value of ch			O(1)

            hash ← (hash * 31 + asciiValue) & 0xFFFFFFFF   	O(1)   

       END FOR

        RETURN |hash| % size					O(1)


    Method insert(kata): 					O(n)

        hashedKata ← hashFunction(kata)			O(n)	

        bucket ← table[hashedKata] 				O(1)

        IF kata NOT IN bucket					O(n)

            ADD kata TO bucket					O(1)

        END IF

    Method temukanKata():					O(n)

        sekata ← empty ArrayList				O(1)

        FOR each bucket IN table				O(n)

            ADD all elements of bucket TO sekata 		O(n)

        END FOR

        RETURN sekata						O(1)


Method main:

    PRINT "Masukkan paragraf:"				O(1)

    inputText ← read line from input 				O(1)	

    inputText ← inputText to lowercase			O(1)

    pattern ← regex pattern to match words			O(1)

    matcher ← pattern matcher for inputText			O(1)

    hashTable ← new HashTable(5000)			O(1)

    WHILE matcher finds a word				O(n)

        word ← matcher group					O(1)

        CALL hashTable.insert(word)				O(n)

   END WHILE  

    kataUnik ← CALL hashTable.temukanKata()		O(n)

    SORT kataUnik						O(n log n)

    FOR each word IN kataUnik				O(n)

        PRINT word 						O(1)

    END FOR

    CLOSE input						O(1)


Analisis Big O 
•	1+1+1+1+1+(n*1)+1+n+1+((n-1)*3)+1+n+n+1+(n*1)+n+1+(n*n)+1+1+1+1+1+1+1(n*(1+n)+n+n log n+(n*1)+1
•	=18+(12n-3) +(n^2 + n^2 + 2n) + n log n
	=15 + 14n + 2n^2 + n log n

eskpresi dengan pertubuhan terbesar yaitu n^2 maka notasi Big O nya adalag O(n^2)
